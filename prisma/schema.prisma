generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    email         String         @unique
    name          String?
    password      String
    role          Role           @default(USER)
    isPaid        Boolean        @default(false)    // Added field
    refreshTokens RefreshToken[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    invitations   Invitation[]
}

model RefreshToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())
    revoked   Boolean  @default(false)
}

//========================================
// Core Authentication Schema Above
// Custom Schema Below
//========================================

enum InvitationStatus {
    PENDING
    ACCEPTED
    EXPIRED
    DECLINED
}

model Invitation {
    id         String           @id @default(auto()) @map("_id") @db.ObjectId
    email      String
    role       Role
    invitedBy  String           @db.ObjectId
    inviter    User             @relation(fields: [invitedBy], references: [id])
    isAccepted Boolean          @default(false)
    acceptedAt DateTime?
    expiresAt  DateTime
    token      String           @unique
    status     InvitationStatus @default(PENDING)
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt
}

// New API related models
model API {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    baseUrl     String
    description String?
    isPaid      Boolean    @default(false)
    isActive    Boolean?    @default(true)
    createdBy   String     @db.ObjectId
    endpoints   Endpoint[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Endpoint {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    method       String
    path         String
    description  String?
    isPaid       Boolean   @default(false)
    requestLimit Int?
    parameters   Json[]
    apiId        String    @db.ObjectId
    api          API       @relation(fields: [apiId], references: [id], onDelete: Cascade)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}
